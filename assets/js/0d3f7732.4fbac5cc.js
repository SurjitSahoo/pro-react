"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[8277],{7583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"performance/use-effect-is-dangerous","title":"useEffect is Dangerous!","description":"Always avoid using useEffect if you have any alternate solution.","source":"@site/docs/4.performance/3.use-effect-is-dangerous.md","sourceDirName":"4.performance","slug":"/performance/use-effect-is-dangerous","permalink":"/pro-react/docs/performance/use-effect-is-dangerous","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/4.performance/3.use-effect-is-dangerous.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"slug":"use-effect-is-dangerous"},"sidebar":"tutorialSidebar","previous":{"title":"What Are Hooks?","permalink":"/pro-react/docs/performance/what-are-hooks"}}');var r=n(4848),o=n(8453);const a={sidebar_position:3,slug:"use-effect-is-dangerous"},i="useEffect is Dangerous!",c={},d=[{value:"Common pitfalls",id:"common-pitfalls",level:2},{value:"Don&#39;t use it to update the local state if the props change.",id:"dont-use-it-to-update-the-local-state-if-the-props-change",level:3}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsxs)(t.h1,{id:"useeffect-is-dangerous",children:[(0,r.jsx)(t.code,{children:"useEffect"})," is Dangerous!"]})}),"\n",(0,r.jsx)(t.admonition,{type:"danger",children:(0,r.jsxs)(t.p,{children:["Always avoid using ",(0,r.jsx)(t.code,{children:"useEffect"})," if you have any alternate solution."]})}),"\n",(0,r.jsx)(t.admonition,{title:"Remember",type:"info",children:(0,r.jsx)(t.p,{children:"It runs only after the commit phase, i.e after the re-render changes have been committed to the DOM."})}),"\n",(0,r.jsx)(t.h2,{id:"common-pitfalls",children:"Common pitfalls"}),"\n",(0,r.jsx)(t.h3,{id:"dont-use-it-to-update-the-local-state-if-the-props-change",children:"Don't use it to update the local state if the props change."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:'title="DON\'T \ud83d\udca9\ud83d\udca3"',children:"function Message({ msg }) {\n  const [msgState, setMsgState] = useState(msg);\n\n  useEffect(() => setMsgState(msg), [msg]);\n\n  return <div>{msgState}</div>;\n}\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["When the ",(0,r.jsx)(t.code,{children:"msg"})," prop changes from parent, it'll call the ",(0,r.jsx)(t.code,{children:"<Message/>"})," component function again passing the new updated ",(0,r.jsx)(t.code,{children:"msg"})," (re-render triggered)."]}),"\n",(0,r.jsxs)(t.li,{children:["Then Message component will re-render by re-calculating the changes in the UI elements, and commit the changes to the browser. Only after that, your ",(0,r.jsx)(t.code,{children:"useEffect"})," will run, setting the new msg in the state. That will again trigger re-render. But you already got the updated msg in previous render, you do not need another re-render!!"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:'title="DO \u2705"',children:"function Message({ msg }) {\n  return <div>{msg}</div>;\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);