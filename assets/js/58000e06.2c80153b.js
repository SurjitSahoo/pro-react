"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[6283],{3703:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"architecture/state-management/context-can-be-dangerous","title":"React Context is Dangerous","description":"Context is not a replacement for global state. It can cause visible performance problems.","source":"@site/docs/1.architecture/6.state-management/2.context-can-be-dangerous.md","sourceDirName":"1.architecture/6.state-management","slug":"/architecture/state-management/context-can-be-dangerous","permalink":"/pro-react/docs/architecture/state-management/context-can-be-dangerous","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/1.architecture/6.state-management/2.context-can-be-dangerous.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"React Context is Dangerous"},"sidebar":"tutorialSidebar","previous":{"title":"Local State Vs Global State","permalink":"/pro-react/docs/architecture/state-management/local-state-vs-globl-state"},"next":{"title":"Decouple UI from State","permalink":"/pro-react/docs/architecture/state-management/decouple-ui-from-state-using-global-state"}}');var a=n(4848),r=n(8453);const s={sidebar_position:2,title:"React Context is Dangerous"},c="Rect Context can be Dangerous!",i={},l=[{value:"Problem with context",id:"problem-with-context",level:2},{value:"How do 3rd party global state libraries work?",id:"how-do-3rd-party-global-state-libraries-work",level:3},{value:"Where Context Makes Sense",id:"where-context-makes-sense",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"rect-context-can-be-dangerous",children:"Rect Context can be Dangerous!"})}),"\n",(0,a.jsx)(t.admonition,{title:"Use Context with CAUTION",type:"danger",children:(0,a.jsx)(t.p,{children:"Context is not a replacement for global state. It can cause visible performance problems."})}),"\n",(0,a.jsx)(t.h2,{id:"problem-with-context",children:"Problem with context"}),"\n",(0,a.jsxs)(t.p,{children:["When the context value changes, react does not know which components are using the context values, So it forces re-render of the entire component tree wrapped in that context. ",(0,a.jsx)(t.strong,{children:"HUGE PERFORMANCE PROBLEM"})]}),"\n",(0,a.jsx)(t.h3,{id:"how-do-3rd-party-global-state-libraries-work",children:"How do 3rd party global state libraries work?"}),"\n",(0,a.jsx)(t.p,{children:'Yes "redux" and all the global state management libraries use React\'s context internally one way or another, so a lot of developers, even very experienced ones think we can ditch the 3rd party libraries and use Context directly.'}),"\n",(0,a.jsx)(t.p,{children:"But Redux doesn't expose the states through context, it'd be a problem like explained above!"}),"\n",(0,a.jsxs)(t.p,{children:["It only exposes the ",(0,a.jsx)(t.code,{children:"useSelector"})," and ",(0,a.jsx)(t.code,{children:"useDispatch"})," hooks through context, these hooks are just javascript functions that never ever change, never get re-created, or redefined or updated."]}),"\n",(0,a.jsx)(t.p,{children:"The functions remain same. And it's these functions that know how to find the needed piece of state from global state. These hooks know which components have subscribed to which states, and which components triggered the state update, so redux can determine which components need to be re-rendered. There is a lot of engineering in there!"}),"\n",(0,a.jsx)(t.h2,{id:"where-context-makes-sense",children:"Where Context Makes Sense"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Context is suitable for use cases where we have minimal writes and tons of reads."}),"\n",(0,a.jsxs)(t.li,{children:["Rule of thumb: If the context value can change more than twice, use a dedicated global state management system, don't use context.","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"e.g. App Theme: current theme can be stored in a context and all the components can have access to the value. When the context value changes, all the components do need re-rendering."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.li,{children:"Rule of thumb: If the context only affects a very small portion of the application tree, go ahead, otherwise use a dedicated global state management system."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var o=n(6540);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);