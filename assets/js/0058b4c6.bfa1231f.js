"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Why Code Quality Matters","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Separation of Concerns","href":"/docs/architecture/separation-of-concerns","docId":"architecture/separation-of-concerns","unlisted":false},{"type":"link","label":"Single Responsibility Principle","href":"/docs/architecture/single-responsibility-principle","docId":"architecture/single-responsibility-principle","unlisted":false},{"type":"link","label":"How to write a component","href":"/docs/architecture/how-to-write-a-component","docId":"architecture/how-to-write-a-component","unlisted":false}],"href":"/docs/category/architecture"}]},"docs":{"architecture/how-to-write-a-component":{"id":"architecture/how-to-write-a-component","title":"How to write a component","description":"Each component should be as generic as possible. Avoid implementing components that are tightly coupled to specific business features or requirements. While you may initially build a component to fulfill a particular business need, that\'s just the starting point. After implementing the feature, refactor your code by extracting and splitting it into smaller, more focused components. Continue extracting and splitting until until you cannot extract or split the code any further.","sidebar":"tutorialSidebar"},"architecture/separation-of-concerns":{"id":"architecture/separation-of-concerns","title":"Separation of Concerns","description":"React is the antithesis of this principle. It has HTML, CSS, JavaScript, all in the same file.","sidebar":"tutorialSidebar"},"architecture/single-responsibility-principle":{"id":"architecture/single-responsibility-principle","title":"Single Responsibility Principle","description":"Meaning one \\"thing\\" should only concern about doing one thing properly. This \\"one thing\\" can be a React Component, a function or a module, etc.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Why Code Quality Matters","description":"Bad code is a technical debt. We will have to pay for it eventually. It\'ll get harder and harder to maintain in the long run. And you\'ll get","sidebar":"tutorialSidebar"}}}}')}}]);