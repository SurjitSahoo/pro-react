"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[542],{9851:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Why Code Quality Matters","href":"/pro-react/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Separation of Concerns","href":"/pro-react/docs/architecture/separation-of-concerns","docId":"architecture/separation-of-concerns","unlisted":false},{"type":"link","label":"Single Responsibility Principle","href":"/pro-react/docs/architecture/single-responsibility-principle","docId":"architecture/single-responsibility-principle","unlisted":false},{"type":"link","label":"How to Write a Component","href":"/pro-react/docs/architecture/how-to-write-a-component","docId":"architecture/how-to-write-a-component","unlisted":false},{"type":"link","label":"Open Close Principle and the Role of Agile","href":"/pro-react/docs/architecture/open-close-principle-and-the-role-of-agile","docId":"architecture/open-close-principle-and-the-role-of-agile","unlisted":false},{"type":"link","label":"How To Structure A React Application?","href":"/pro-react/docs/architecture/how-to-structure-react-application","docId":"architecture/how-to-structure-react-application","unlisted":false}],"href":"/pro-react/docs/category/architecture"}]},"docs":{"architecture/how-to-structure-react-application":{"id":"architecture/how-to-structure-react-application","title":"How To Structure A React Application?","description":"- The folder structure of any application should not tell us about whether its a react app or angular app or svelt app. What tools / frameworks we use to develop our application is a low level detail. But the folder structure is the highest level structure we see about an application. Hence the folder structure of an application should describe the overall structure of the application. Folder structure will differ application to application as all applications are different, just like floor plan blueprint of buildings vary building to building as all buildings / houses are different.","sidebar":"tutorialSidebar"},"architecture/how-to-write-a-component":{"id":"architecture/how-to-write-a-component","title":"How to Write a Component","description":"Each component should be as generic as possible. Avoid creating components that are tightly coupled to specific business features or requirements. While you may initially build a component to address a particular business need, treat that as a starting point. After implementing the feature, refactor your code by extracting and splitting it into smaller, more focused components. Continue this process until you cannot extract or split the code any further.","sidebar":"tutorialSidebar"},"architecture/open-close-principle-and-the-role-of-agile":{"id":"architecture/open-close-principle-and-the-role-of-agile","title":"Open Close Principle and the Role of Agile","description":"Open Close Principle","sidebar":"tutorialSidebar"},"architecture/separation-of-concerns":{"id":"architecture/separation-of-concerns","title":"Separation of Concerns","description":"React is the antithesis of this principle. It has HTML, CSS, JavaScript, all in the same file.","sidebar":"tutorialSidebar"},"architecture/single-responsibility-principle":{"id":"architecture/single-responsibility-principle","title":"Single Responsibility Principle","description":"Meaning one \\"thing\\" should only concern about doing one thing properly. This \\"one thing\\" can be a React Component, a function or a module, etc.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Why Code Quality Matters","description":"Bad code is a technical debt. We will have to pay for it eventually. It\'ll get harder and harder to maintain in the long run. And you\'ll get","sidebar":"tutorialSidebar"}}}}')}}]);