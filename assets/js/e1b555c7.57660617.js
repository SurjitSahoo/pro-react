"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[8542],{9851:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Why Code Quality Matters","href":"/pro-react/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Architecture","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Separation of Concerns","href":"/pro-react/docs/architecture/separation-of-concerns","docId":"architecture/separation-of-concerns","unlisted":false},{"type":"link","label":"Single Responsibility Principle","href":"/pro-react/docs/architecture/single-responsibility-principle","docId":"architecture/single-responsibility-principle","unlisted":false},{"type":"link","label":"How to Write a Component","href":"/pro-react/docs/architecture/how-to-write-a-component","docId":"architecture/how-to-write-a-component","unlisted":false},{"type":"link","label":"Open Close Principle and the Role of Agile","href":"/pro-react/docs/architecture/open-close-principle-and-the-role-of-agile","docId":"architecture/open-close-principle-and-the-role-of-agile","unlisted":false},{"type":"link","label":"How To Structure A React Application?","href":"/pro-react/docs/architecture/how-to-structure-react-application","docId":"architecture/how-to-structure-react-application","unlisted":false},{"type":"category","label":"State Management","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Local State Vs Global State","href":"/pro-react/docs/architecture/state-management/local-state-vs-globl-state","docId":"architecture/state-management/local-state-vs-globl-state","unlisted":false},{"type":"link","label":"React Context is Dangerous","href":"/pro-react/docs/architecture/state-management/context-can-be-dangerous","docId":"architecture/state-management/context-can-be-dangerous","unlisted":false},{"type":"link","label":"Decouple UI from State","href":"/pro-react/docs/architecture/state-management/decouple-ui-from-state-using-global-state","docId":"architecture/state-management/global-state","unlisted":false},{"type":"link","label":"APIs and Caching","href":"/pro-react/docs/architecture/state-management/cached-api","docId":"architecture/state-management/api-and-caching","unlisted":false}],"href":"/pro-react/docs/category/state-management"}],"href":"/pro-react/docs/category/architecture"},{"type":"category","label":"Performance","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Class Components Vs Function Components","href":"/pro-react/docs/performance/class-components-vs-function-components","docId":"performance/class-components-vs-function-components","unlisted":false},{"type":"link","label":"What Are Hooks? \ud83e\ude9d","href":"/pro-react/docs/performance/what-are-hooks","docId":"performance/what-are-hooks","unlisted":false},{"type":"link","label":"useEffect is Dangerous! \ud83e\udde8\ud83d\udca3","href":"/pro-react/docs/performance/use-effect-is-dangerous","docId":"performance/use-effect-is-dangerous","unlisted":false},{"type":"link","label":"How to think about useEffect","href":"/pro-react/docs/performance/how-to-think-about-use-effect","docId":"performance/how-to-think-about-use-effect","unlisted":false},{"type":"link","label":"Caching API Calls","href":"/pro-react/docs/performance/api-caching","docId":"performance/api-caching","unlisted":false}],"href":"/pro-react/docs/category/performance"},{"type":"category","label":"Miscellaneous","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Naming Convention","href":"/pro-react/docs/Miscellaneus/naming-convention","docId":"Miscellaneus/naming-convention","unlisted":false},{"type":"link","label":"Avoid Code Duplication","href":"/pro-react/docs/Miscellaneus/avoid-code-duplication","docId":"Miscellaneus/avoid-code-duplication","unlisted":false},{"type":"link","label":"Avoid Nested IF Checks","href":"/pro-react/docs/Miscellaneus/avoid-nested-if-checks","docId":"Miscellaneus/avoid-nested-if-checks","unlisted":false},{"type":"link","label":"No of Lines in A Function","href":"/pro-react/docs/Miscellaneus/no-of-lines","docId":"Miscellaneus/no-of-lines","unlisted":false},{"type":"link","label":"Don\'t Store JSX in State","href":"/pro-react/docs/Miscellaneus/dont-store-jsx-in-state","docId":"Miscellaneus/dont-store-jsx-in-state","unlisted":false},{"type":"link","label":"Don\'t Create Contradicting States","href":"/pro-react/docs/Miscellaneus/dont-create-contradicting-states","docId":"Miscellaneus/dont-create-contradicting-states","unlisted":false},{"type":"link","label":"Don\'t Create Nested Components","href":"/pro-react/docs/Miscellaneus/dont-create-nested-components","docId":"Miscellaneus/dont-create-nested-components","unlisted":false}],"href":"/pro-react/docs/category/miscellaneous"}]},"docs":{"architecture/how-to-structure-react-application":{"id":"architecture/how-to-structure-react-application","title":"How To Structure A React Application?","description":"- The folder structure of any application should not tell us about whether its a react app or angular app or svelt app. What tools / frameworks we use to develop our application is a low level detail. But the folder structure is the highest level structure we see about an application. Hence the folder structure of an application should describe the overall structure of the application. Folder structure will differ application to application as all applications are different, just like floor plan blueprint of buildings vary building to building as all buildings / houses are different.","sidebar":"tutorialSidebar"},"architecture/how-to-write-a-component":{"id":"architecture/how-to-write-a-component","title":"How to Write a Component","description":"Each component should be as generic as possible. Avoid creating components that are tightly coupled to specific business features or requirements. While you may initially build a component to address a particular business need, treat that as a starting point. After implementing the feature, refactor your code by extracting and splitting it into smaller, more focused components. Continue this process until you cannot extract or split the code any further.","sidebar":"tutorialSidebar"},"architecture/open-close-principle-and-the-role-of-agile":{"id":"architecture/open-close-principle-and-the-role-of-agile","title":"Open Close Principle and the Role of Agile","description":"Open Close Principle","sidebar":"tutorialSidebar"},"architecture/separation-of-concerns":{"id":"architecture/separation-of-concerns","title":"Separation of Concerns","description":"React is the antithesis of this principle. It has HTML, CSS, JavaScript, all in the same file.","sidebar":"tutorialSidebar"},"architecture/single-responsibility-principle":{"id":"architecture/single-responsibility-principle","title":"Single Responsibility Principle","description":"Meaning one \\"thing\\" should only concern about doing one thing properly. This \\"one thing\\" can be a React Component, a function or a module, etc.","sidebar":"tutorialSidebar"},"architecture/state-management/api-and-caching":{"id":"architecture/state-management/api-and-caching","title":"APIs and Caching","description":"Caching API calls is important for performance and user experience. For example, if you fetch data in TABA, switch to TABB to fetch different data, and then quickly return to TAB_A, you typically don\'t need to refetch the data again if it hasn\'t changed. Instead, reuse the cached data and render the content. If necessary, refetch it in the background and only update the UI if the data has changed; otherwise, continue displaying the cached data.","sidebar":"tutorialSidebar"},"architecture/state-management/context-can-be-dangerous":{"id":"architecture/state-management/context-can-be-dangerous","title":"React Context is Dangerous","description":"Context is not a replacement for global state. It can cause visible performance problems.","sidebar":"tutorialSidebar"},"architecture/state-management/global-state":{"id":"architecture/state-management/global-state","title":"Decouple UI from State","description":"When it comes to global state management in react, there\'s no opinionated solution on the topic. But currently redux is by far the most popular library. How we use redux in our react applications has gone through many changes and evolved over the past few years.","sidebar":"tutorialSidebar"},"architecture/state-management/local-state-vs-globl-state":{"id":"architecture/state-management/local-state-vs-globl-state","title":"Local State Vs Global State","description":"There are two kinds of state in React","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Why Code Quality Matters","description":"Bad code is a technical debt. We will have to pay for it eventually. It\'ll get harder and harder to maintain in the long run. And you\'ll get","sidebar":"tutorialSidebar"},"Miscellaneus/avoid-code-duplication":{"id":"Miscellaneus/avoid-code-duplication","title":"Avoid Code Duplication","description":"Don\'t Repeat Yourself","sidebar":"tutorialSidebar"},"Miscellaneus/avoid-nested-if-checks":{"id":"Miscellaneus/avoid-nested-if-checks","title":"Avoid Nested IF Checks","description":"- Nested if conditions are harder to read, as the reader has to move up and down to see what happens in else, which if case is wrapped under which and so on.","sidebar":"tutorialSidebar"},"Miscellaneus/dont-create-contradicting-states":{"id":"Miscellaneus/dont-create-contradicting-states","title":"Don\'t Create Contradicting States","description":"In the above code it\'s easy to create a situation where both isLoading and isError is true and vice versa.","sidebar":"tutorialSidebar"},"Miscellaneus/dont-create-nested-components":{"id":"Miscellaneus/dont-create-nested-components","title":"Don\'t Create Nested Components","description":"","sidebar":"tutorialSidebar"},"Miscellaneus/dont-store-jsx-in-state":{"id":"Miscellaneus/dont-store-jsx-in-state","title":"Don\'t Store JSX in State","description":"- The state should always be a serializable javascript object. JSX gets converted to React objects with React.createElement() at compile time by babel. And these objects are not always serializable.","sidebar":"tutorialSidebar"},"Miscellaneus/naming-convention":{"id":"Miscellaneus/naming-convention","title":"Naming Convention","description":"Guidelines for Choosing Names","sidebar":"tutorialSidebar"},"Miscellaneus/no-of-lines":{"id":"Miscellaneus/no-of-lines","title":"No of Lines in A Function","description":"- Lesser the lines of code, the easier it is to read and understand.","sidebar":"tutorialSidebar"},"performance/api-caching":{"id":"performance/api-caching","title":"Caching API Calls","description":"If the user is frequently navigation between pages, and on every page visit if we are triggering API calls to fetch the data for the page, the user will see a loading screen every single time.","sidebar":"tutorialSidebar"},"performance/class-components-vs-function-components":{"id":"performance/class-components-vs-function-components","title":"Class Components Vs Function Components","description":"Class Components","sidebar":"tutorialSidebar"},"performance/how-to-think-about-use-effect":{"id":"performance/how-to-think-about-use-effect","title":"How to think about useEffect","description":"useDefect or useFootGun \ud83e\uddb6\ud83c\udffc\ud83d\udd2b","sidebar":"tutorialSidebar"},"performance/use-effect-is-dangerous":{"id":"performance/use-effect-is-dangerous","title":"useEffect is Dangerous! \ud83e\udde8\ud83d\udca3","description":"Always avoid using useEffect if you have any alternate solution.","sidebar":"tutorialSidebar"},"performance/what-are-hooks":{"id":"performance/what-are-hooks","title":"What Are Hooks? \ud83e\ude9d","description":"It is an optimization technique.","sidebar":"tutorialSidebar"}}}}')}}]);