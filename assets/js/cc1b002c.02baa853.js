"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[257],{8444:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"architecture/how-to-structure-react-application","title":"How To Structure A React Application?","description":"- The folder structure of any application should not tell us about whether its a react app or angular app or svelt app. What tools / frameworks we use to develop our application is a low level detail. But the folder structure is the highest level structure we see about an application. Hence the folder structure of an application should describe the overall structure of the application. Folder structure will differ application to application as all applications are different, just like floor plan blueprint of buildings vary building to building as all buildings / houses are different.","source":"@site/docs/1.architecture/5.how-to-structure-react-application.md","sourceDirName":"1.architecture","slug":"/architecture/how-to-structure-react-application","permalink":"/pro-react/docs/architecture/how-to-structure-react-application","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/1.architecture/5.how-to-structure-react-application.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Open Close Principle and the Role of Agile","permalink":"/pro-react/docs/architecture/open-close-principle-and-the-role-of-agile"}}');var o=n(4848),s=n(8453);const a={sidebar_position:5},l="How To Structure A React Application?",i={},u=[{value:"Good Folder Structure Example \u2705",id:"good-folder-structure-example-",level:3},{value:"Bad Folder Structure Example \ud83d\udca9",id:"bad-folder-structure-example-",level:3},{value:"Example of complete structure \u2705",id:"example-of-complete-structure-",level:3}];function c(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"how-to-structure-a-react-application",children:"How To Structure A React Application?"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"The folder structure of any application should not tell us about whether its a react app or angular app or svelt app. What tools / frameworks we use to develop our application is a low level detail. But the folder structure is the highest level structure we see about an application. Hence the folder structure of an application should describe the overall structure of the application. Folder structure will differ application to application as all applications are different, just like floor plan blueprint of buildings vary building to building as all buildings / houses are different."}),"\n",(0,o.jsx)(t.li,{children:"Folder structure should be feature based. Like: when you read a news paper article, the title gives you some idea on the article, the first paragraph gives you some more high level information. Then the next paragraph gives you some more details and so on. The more you dig in, the more detailed it becomes. All the low level details should be present at the deepest folders and deepest level functions."}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"good-folder-structure-example-",children:"Good Folder Structure Example \u2705"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-txt",metastring:'title="sample folder structure for YouTube"',children:"YouTube/\n\u251c\u2500\u2500 layouts/ // <------- only high-level page layouts, they dont know any of the feature details\n\u251c\u2500\u2500 pages/ // <--------- Pages are what get displayed on different routes, Pages are constructed using several features\n\u251c\u2500\u2500 routes/ // <-------- Top level routes, feature level sub routes should be maintained in feature level\n\u251c\u2500\u2500 common/ // <-------- common components, helpers, hooks etc all go here, these will be used throughout all the features\n\u2514\u2500\u2500 features/\n    \u251c\u2500\u2500 player/ // <----- All the player related code (components, hooks, states, apis, helpers, configs) go inside this folder\n    \u2502   \u251c\u2500\u2500 index.ts // <--- Public API: exports only the high-level components\n    \u2502   \u251c\u2500\u2500 defaultPlayer // <--- the default main video player\n    |   |   \u251c\u2500\u2500 hooks/ // <---- default player hooks (if any)\n    |   |   \u251c\u2500\u2500 helpers/ // <---- default player helper functions\n    |   |   \u251c\u2500\u2500 defaultPlayer.tsx // <------- component code\n    |   |   \u251c\u2500\u2500 defaultPlayer.test.tsx\n    |   |   \u251c\u2500\u2500 defaultPlayer.css\n    |   |   \u2514\u2500\u2500 index.ts // <---- exports the default player component.\n    \u2502   \u251c\u2500\u2500 miniPlayer // <------ minimized player, only shows thumbnail, title, duration and progress\n    \u2502   \u251c\u2500\u2500 pipPlayer // <------- picture in picture player\n    |   \u251c\u2500\u2500 helpers/ // <--- common player helper functions\n    |   \u251c\u2500\u2500 api/ // All the player APIs\n    \u2502   \u2514\u2500\u2500 hooks/\n    \u2502       \u2514\u2500\u2500 useCurrentlyPlaying // <--- provides live data of currently playing video, progress, duration, title etc.\n    |\n    \u2514\u2500\u2500 chat/ // <-------- All the chat / comments related code goes here\n        \u251c\u2500\u2500 comments\n        \u2514\u2500\u2500 liveChat\n"})}),"\n",(0,o.jsx)(t.p,{children:"In the above example, all the files are neatly separated. chat components should not be kept with player components, player helpers and hooks should not be kept with chat helpers and hooks."}),"\n",(0,o.jsx)(t.h3,{id:"bad-folder-structure-example-",children:"Bad Folder Structure Example \ud83d\udca9"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-txt",metastring:'title="Bad folder structure example"',children:"YouTube/\n\u251c\u2500\u2500 components/ // <------------ All the components kept together: all mixed up!\n\u2502   \u251c\u2500\u2500 player.tsx\n\u2502   \u251c\u2500\u2500 player.test.tsx\n\u2502   \u251c\u2500\u2500 miniPlayer.tsx\n\u2502   \u251c\u2500\u2500 miniPlayer.test.tsx\n\u2502   \u251c\u2500\u2500 chat.tsx\n\u2502   \u251c\u2500\u2500 chat.test.tsx\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 routes // <---------------- All the routes defined together: all mixed up!\n\u251c\u2500\u2500 utils\n\u251c\u2500\u2500 hooks/\n\u2502   \u251c\u2500\u2500 useChatGroups.ts\n\u2502   \u251c\u2500\u2500 useChatGroups.test.ts\n\u2502   \u251c\u2500\u2500 useCurrentlyPlaying.ts\n\u2502   \u2514\u2500\u2500 useCurrentlyPlaying.test.ts\n\u2514\u2500\u2500 constants/\n    \u251c\u2500\u2500 routeConstants.ts\n    \u2514\u2500\u2500 configConstants.ts\n"})}),"\n",(0,o.jsx)(t.h3,{id:"example-of-complete-structure-",children:"Example of complete structure \u2705"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-txt",metastring:'title="Complete Structure (Sample)"',children:"YouTube/\n\u251c\u2500\u2500 layouts/\n\u2502   \u2514\u2500\u2500 mainLayout/\n\u2502       \u251c\u2500\u2500 mainLayout.tsx\n\u2502       \u251c\u2500\u2500 mainLayout.styles.css\n\u2502       \u251c\u2500\u2500 mainLayout.types.ts\n\u2502       \u251c\u2500\u2500 mainLayout.test.ts\n\u2502       \u2514\u2500\u2500 index.tx\n\u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 profilePage/\n\u2502   \u251c\u2500\u2500 homePage/\n\u2502   \u2514\u2500\u2500 error/\n\u2502       \u251c\u2500\u2500 notFound/\n\u2502       \u2502   \u251c\u2500\u2500 notFound.tsx\n\u2502       \u2502   \u251c\u2500\u2500 notFound.styles.css\n\u2502       \u2502   \u251c\u2500\u2500 notFound.types.ts\n\u2502       \u2502   \u251c\u2500\u2500 notFound.test.tsx\n\u2502       \u2502   \u2514\u2500\u2500 index.ts\n\u2502       \u251c\u2500\u2500 serverError/\n\u2502       \u2502   \u251c\u2500\u2500 serverError.tsx\n\u2502       \u2502   \u251c\u2500\u2500 serverError.styles.css\n\u2502       \u2502   \u251c\u2500\u2500 serverError.types.ts\n\u2502       \u2502   \u251c\u2500\u2500 serverError.test.tsx\n\u2502       \u2502   \u2514\u2500\u2500 index.ts\n\u2502       \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 routes/\n\u251c\u2500\u2500 common/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2514\u2500\u2500 inputs/\n\u2502   \u2502       \u251c\u2500\u2500 button/\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 button.tsx\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 button.styles.css\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 button.test.tsx\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 button.types.ts\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 button.stories.tsx\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502       \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u2514\u2500\u2500 useFetch/\n\u2502   \u2502       \u251c\u2500\u2500 useFetch.ts\n\u2502   \u2502       \u251c\u2500\u2500 useFetch.test.tsx\n\u2502   \u2502       \u251c\u2500\u2500 useFetch.types.ts\n\u2502   \u2502       \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 utils/\n|\n\u251c\u2500\u2500 features/\n\u2502   \u251c\u2500\u2500 player/\n\u2502   \u2514\u2500\u2500 chat/\n|\n\u2514\u2500\u2500 globalState/\n    \u251c\u2500\u2500 core/\n    \u2502   \u251c\u2500\u2500 store.ts\n    \u2502   \u251c\u2500\u2500 stateProvider.tsx\n    \u2502   \u251c\u2500\u2500 context.ts\n    \u2502   \u251c\u2500\u2500 hooks.ts\n    \u2502   \u2514\u2500\u2500 index.ts\n    \u251c\u2500\u2500 remote/\n    \u2502   \u2514\u2500\u2500 api.ts\n    \u2514\u2500\u2500 local/\n        \u2514\u2500\u2500 leftNav/\n            \u251c\u2500\u2500 leftNav.slice.ts\n            \u251c\u2500\u2500 useLeftNav.ts\n            \u2514\u2500\u2500 index.ts\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);