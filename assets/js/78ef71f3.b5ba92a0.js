"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[302],{8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}},8915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"architecture/how-to-write-a-component","title":"How to write a component","description":"Each component should be as generic as possible. Avoid implementing components that are tightly coupled to specific business features or requirements. While you may initially build a component to fulfill a particular business need, that\'s just the starting point. After implementing the feature, refactor your code by extracting and splitting it into smaller, more focused components. Continue extracting and splitting until until you cannot extract or split the code any further.","source":"@site/docs/1.architecture/3.how-to-write-a-component.md","sourceDirName":"1.architecture","slug":"/architecture/how-to-write-a-component","permalink":"/docs/architecture/how-to-write-a-component","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/1.architecture/3.how-to-write-a-component.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Single Responsibility Principle","permalink":"/docs/architecture/single-responsibility-principle"}}');var i=n(4848),s=n(8453);const r={sidebar_position:2},a="How to write a component",c={},l=[];function u(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"how-to-write-a-component",children:"How to write a component"})}),"\n",(0,i.jsx)(t.p,{children:"Each component should be as generic as possible. Avoid implementing components that are tightly coupled to specific business features or requirements. While you may initially build a component to fulfill a particular business need, that's just the starting point. After implementing the feature, refactor your code by extracting and splitting it into smaller, more focused components. Continue extracting and splitting until until you cannot extract or split the code any further."}),"\n",(0,i.jsx)(t.p,{children:"These smaller components should be designed for maximum reusability, making them easy to use in different scenarios. This approach improves maintainability and scalability across your projects."}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Write once, reuse everywhere."})}),"\n",(0,i.jsx)(t.p,{children:"Every component should be placed in its own folder. This folder should contain all code related to that component, including:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The main component file"}),"\n",(0,i.jsx)(t.li,{children:"Test files"}),"\n",(0,i.jsx)(t.li,{children:"Styles (CSS/SCSS, etc.)"}),"\n",(0,i.jsx)(t.li,{children:"Storybook files (if any)"}),"\n",(0,i.jsxs)(t.li,{children:["Helper files (with their own tests). If there are multiple helpers, group them in a ",(0,i.jsx)(t.code,{children:"helpers"})," folder."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Helpers are typically needed at the feature level. This is because your components will often require input in a different data structure than what you receive from the API, and they may also output data in a format different from what your API expects. Therefore, you will likely need helper functions to transform data between these formats."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",metastring:'title="Example of clean structure"',children:".\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 button/\n\u2502   \u2502   \u251c\u2500\u2500 button.tsx // component\n\u2502   \u2502   \u251c\u2500\u2500 button.css // styles\n\u2502   \u2502   \u251c\u2500\u2500 button.test.tsx // unit tests\n\u2502   \u2502   \u251c\u2500\u2500 button.stories.tsx // storybook documentation\n\u2502   \u2502   \u2514\u2500\u2500 index.ts // public API, exports button component\n|   |\n\u2502   \u2514\u2500\u2500 modal/\n\u2502       \u251c\u2500\u2500 modal.tsx // component\n\u2502       \u251c\u2500\u2500 modal.css // styles\n\u2502       \u251c\u2500\u2500 modal.test.tsx // unit tests\n\u2502       \u251c\u2500\u2500 modal.stories.tsx // storybook documentation\n\u2502       \u2514\u2500\u2500 index.ts // public API, exports modal component\n|\n\u2514\u2500\u2500 features/\n    \u251c\u2500\u2500 feedbackForm/\n    \u2502   \u251c\u2500\u2500 feedbackForm.tsx // feature component\n    \u2502   \u251c\u2500\u2500 feedbackForm.css // styles\n    \u2502   \u251c\u2500\u2500 feedbackForm.test.tsx // integration tests\n    \u2502   \u251c\u2500\u2500 feedbackForm.stories.tsx // storybook documentation\n    \u2502   \u2514\u2500\u2500 index.ts // public API, exports feedbackForm feature\n    |\n    \u2514\u2500\u2500 feedbackPopup/\n        \u251c\u2500\u2500 feedbackPopup.tsx // feature component\n        \u251c\u2500\u2500 feedbackPopup.css // styles\n        \u251c\u2500\u2500 feedbackPopup.test.tsx // integration tests\n        \u251c\u2500\u2500 feedbackPopup.stories.tsx // storybook documentation\n        \u2514\u2500\u2500 index.ts // public API, exports feedbackForm feature\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);