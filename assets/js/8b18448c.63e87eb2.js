"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[1505],{6832:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"performance/race-conditions","title":"Race Conditions","description":"Here on every keypress, we\'re triggering an API call.","source":"@site/docs/4.performance/6.race-conditions.md","sourceDirName":"4.performance","slug":"/performance/race-conditions","permalink":"/pro-react/docs/performance/race-conditions","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/4.performance/6.race-conditions.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Race Conditions"},"sidebar":"tutorialSidebar","previous":{"title":"Caching API Calls","permalink":"/pro-react/docs/performance/api-caching"},"next":{"title":"Misc Styles and Principles","permalink":"/pro-react/docs/category/misc-styles-and-principles"}}');var s=t(4848),o=t(8453);const i={sidebar_position:6,title:"Race Conditions"},a="Handle Promise Race Conditions",c={},l=[];function u(e){const n={br:"br",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"handle-promise-race-conditions",children:"Handle Promise Race Conditions"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="DON\'T \ud83d\udca9\ud83e\udde8\ud83d\udca3"',children:"function Search() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    // \ud83d\udca9 Avoid: Fetching without cleanup logic\n    fetchResults(query).then(json => {\n      setResults(json);\n    });\n  }, [query]);\n\n  return (\n    <>\n      <input placeholder='Search..' value={query} onChange={e => setQuery(e.target.value)} />\n      <SearchResults results={results} />\n    </>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here on every keypress, we're triggering an API call."}),"\n",(0,s.jsxs)(n.p,{children:['Suppose we\'re searching for "Hello",',(0,s.jsx)(n.br,{}),"\n",'The response for the search query "He" might be significantly larger than the response for query "Hello",\nHence the response for the search query "Hello" might arrive before the response for the query "Hell" or "He".']}),"\n",(0,s.jsx)(n.p,{children:"And which ever API call resolves last, will override all the previous responses."}),"\n",(0,s.jsxs)(n.p,{children:['So even though we have typed "Hello" to search,',(0,s.jsx)(n.br,{}),"\n",'We might see the results of "Hell" or "He" \ud83d\udca9\ud83d\udca9']}),"\n",(0,s.jsx)(n.p,{children:"That's just one scenario of promise race conditions. There can be many reasons why the promises might not resolve in the order at which they were created."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Different requests can take different amount to time to complete"}),"\n",(0,s.jsx)(n.li,{children:"Network speed fluctuations can delay some API requests."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Asynchronous processes should never be expected to complete in order."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="DO - Example 1 - Ignore the past API response \u2705"',children:"function Search() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    let ignore = false;\n    fetchResults(query).then(json => {\n      // highlight-next-line\n      if (!ignore) {\n        setResults(json);\n      }\n    });\n\n    // highlight-start\n    // cleanup function\n    return () => {\n      ignore = true; // mark previous API to be ignored when \"query\" changes\n    };\n    // highlight-end\n  }, [query]);\n\n  return (\n    <>\n      <input placeholder='Search..' value={query} onChange={e => setQuery(e.target.value)} />\n      <SearchResults results={results} />\n    </>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="DO - Example 2 - Using AbortController \u2705"',children:"function Search() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    fetchResults(\n      query,\n      // highlight-next-line\n      abortController.signal,\n    ).then(json => {\n      setResults(json);\n    });\n\n    // highlight-start\n    // cleanup function\n    return () => {\n      abortController.abort(); // cancel previous API call when \"query\" changes\n    };\n    // highlight-end\n  }, [query]);\n\n  return (\n    <>\n      <input placeholder='Search..' value={query} onChange={e => setQuery(e.target.value)} />\n      <SearchResults results={results} />\n    </>\n  );\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);