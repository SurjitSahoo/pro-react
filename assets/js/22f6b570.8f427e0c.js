"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[149],{4617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"architecture/open-close-principle-and-the-role-of-agile","title":"Open Close Principle and the Role of Agile","description":"- Open-Close principle stands for \\"Open for extension and Closed for Modification\\".","source":"@site/docs/1.architecture/4.open-close-principle-and-the-role-of-agile.md","sourceDirName":"1.architecture","slug":"/architecture/open-close-principle-and-the-role-of-agile","permalink":"/pro-react/docs/architecture/open-close-principle-and-the-role-of-agile","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/1.architecture/4.open-close-principle-and-the-role-of-agile.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"How to Write a Component","permalink":"/pro-react/docs/architecture/how-to-write-a-component"}}');var i=n(4848),r=n(8453);const a={sidebar_position:3},s="Open Close Principle and the Role of Agile",l={},c=[{value:"Additional Learning",id:"additional-learning",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"open-close-principle-and-the-role-of-agile",children:"Open Close Principle and the Role of Agile"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:'Open-Close principle stands for "Open for extension and Closed for Modification".'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Once written, a piece of code should not be modified again (unless it's a bugFix of course) - closed for modification."}),"\n",(0,i.jsx)(t.li,{children:"In Object Oriented Programming inherit from the base class to create a new extended class with additional features."}),"\n",(0,i.jsx)(t.li,{children:"In react if we create a modal, buttons, cards, etc components, we should never need to change those components. If we need our modal look like card, we use card inside the modal, we put as many buttons where ever we need inside the modal as per the requirements."}),"\n",(0,i.jsx)(t.li,{children:"If a particular configuration / arrangements of components get's re-used multiple places, we can define it as another high level component. Such as a popup with specific spacing and styling guidelines for a particular app can be created using a base Modal component. Thus the Popup component becomes the extended component of Modal, keeping the Modal component unchanged."}),"\n",(0,i.jsx)(t.li,{children:"All the components, utilities, helpers should follow this principle."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Agile means the ability to move quickly and easily. It doesn't necessarily means to move faster, but rather jump from one feature to another or one requirement to another without much friction."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"From the start, on the very first implementation our code might not be perfect, that does not require any changes at all. (Closed for Modification). We need to improve the code in iterations. Sprints are for iterations."}),"\n",(0,i.jsx)(t.li,{children:"Work should be split into smaller stories and tasks. Sprints should be short, spanning 1 week or 2 weeks."}),"\n",(0,i.jsx)(t.li,{children:"Within a sprint we should be able to implement something small, or a small part of a requirement and ready to deploy. The feature might not be complete, that's OK, but it must be ready to deploy. Even the chronology of implementation should not matter, and everything should be cleanly decoupled. If we implement logout feature first, then in the next sprint login feature is planned, by the end of current sprint we should be able to deploy the logout feature."}),"\n",(0,i.jsx)(t.li,{children:"And in next sprint when we start to work on the login feature, we realize that the logout code needs some changes! That's a sign, ideally the code should never require any modification to make it work with different implementations of login. So we should take a follow up task first to refactor the logout code. If the sprints are small, we must have implemented small things, which we can refactor in no-time."}),"\n",(0,i.jsxs)(t.li,{children:["The purpose of Agile is to let us know ",(0,i.jsx)(t.strong,{children:"fast"})," how bad our code is! The fact that our code written in previous sprint requires changing tells us that our code didn't follow open-close principle correctly! The faster we identify it, the better. Because once a heavy technical debt is accumulated, It'll get very difficult to fix!"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"additional-learning",children:"Additional Learning"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/playlist?list=PLdTodMosi-BxYqebBBI6JOQitcdUzF4YJ",children:'Learn more about "Open Close" principle from the "Clean Code - lecture series" by Robert C Martin aka Uncle Bob'})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(6540);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);