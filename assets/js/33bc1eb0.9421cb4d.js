"use strict";(self.webpackChunkpro_react=self.webpackChunkpro_react||[]).push([[5344],{4675:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"misc-styles-and-principles/avoid-code-duplication","title":"Avoid Code Duplication","description":"Don\'t Repeat Yourself","source":"@site/docs/7.misc-styles-and-principles/2.avoid-code-duplication.md","sourceDirName":"7.misc-styles-and-principles","slug":"/misc-styles-and-principles/avoid-code-duplication","permalink":"/pro-react/docs/misc-styles-and-principles/avoid-code-duplication","draft":false,"unlisted":false,"editUrl":"https://github.com/SurjitSahoo/pro-react/edit/main/docs/7.misc-styles-and-principles/2.avoid-code-duplication.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Naming Convention","permalink":"/pro-react/docs/misc-styles-and-principles/naming-convention"},"next":{"title":"Avoid Nested IF Checks","permalink":"/pro-react/docs/misc-styles-and-principles/avoid-nested-if-checks"}}');var t=o(4848),c=o(8453);const s={sidebar_position:2},r="Avoid Code Duplication",d={},a=[{value:"Avoid code duplication for data objects",id:"avoid-code-duplication-for-data-objects",level:2},{value:"Avoid code duplication for logic (functional code)",id:"avoid-code-duplication-for-logic-functional-code",level:2},{value:"Avoid code duplication in UI code",id:"avoid-code-duplication-in-ui-code",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"avoid-code-duplication",children:"Avoid Code Duplication"})}),"\n",(0,t.jsx)(n.admonition,{title:"DRY",type:"tip",children:(0,t.jsx)(n.p,{children:"Don't Repeat Yourself"})}),"\n",(0,t.jsx)(n.h2,{id:"avoid-code-duplication-for-data-objects",children:"Avoid code duplication for data objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="Objects"',children:"// Store the common props in an object\nconst common = {\n  prop1: 'prop1',\n  prop2: 'prop2',\n};\n\nconst custom1 = {\n  ...common, // \ud83d\udc48 spread the contents of common object\n  prop2: 'Prop: 2', // \ud83d\udc48 override\n  prop3: 'prop3', // \ud83d\udc48 Add new properties\n  prop4: () => console.log(this.prop2), // \ud83d\udc48 Add new\n};\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="Arrays"',children:"const commonArr = ['prop1', 'prop2'];\n\n//      spread the common \ud83d\udc47        \ud83d\udc47 Add new prop\nconst customArr = [...commonArr, 'prop3'];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"avoid-code-duplication-for-logic-functional-code",children:"Avoid code duplication for logic (functional code)"}),"\n",(0,t.jsx)(n.p,{children:"Extract and split everything up to an extent where we can't split it anymore, We'll have separated every step, every single work neatly into separate functions well organized in separate files and folders. If we need any piece of logic or work to be done again in some other place, we can re-use the existing code."}),"\n",(0,t.jsx)(n.h2,{id:"avoid-code-duplication-in-ui-code",children:"Avoid code duplication in UI code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="Sort (Asc/Desc) Button | Everything is duplicate \ud83d\udca9\ud83d\udca9\ud83d\udca9"',children:"{\n  sort ? (\n    sort == 'asc' ? (\n      <button onClick={() => sortData('asc')}>\n        <span>Sort</span>\n        <icon>Ascending</icon>\n      </button>\n    ) : (\n      <button onClick={() => sortData('desc')}>\n        <span>Sort</span>\n        <icon>Descending</icon>\n      </button>\n    )\n  ) : null;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="Sort (Asc/Desc) Button | Simplify \u2705"',children:"<button onClick={() => sortData(sort)}>\n  <span>Sort</span>\n  {/* Only the icon needs to change */}\n  {sort ? sort === 'asc' ? <icon>Ascending</icon> : <icon>Descending</icon> : null}\n</button>\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Don't overuse ternary conditions",type:"note",children:(0,t.jsx)(n.p,{children:"It is okay to use ternary conditions in UI code up to 1 or 2 levels at most,\nwriting more than that makes it ugly and hard to read. it should be refactored and simplified."})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var i=o(6540);const t={},c=i.createContext(t);function s(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);